{
  "portfolio-data": [
    {
      "title": "Hamster Hustle",
      "category": "Multiplayer Party Game",
      "link": "https://store.steampowered.com/app/3597930/Hamster_Hustle/",
      "image": "Hustle.png",
      "video": "https://player.vimeo.com/video/1114691309",
      "introduction": "Online party game where you dress up and play tag and other games as hamsters.",
      "goals_list": {
        "1": "Shader Materials",
        "2": "Overall Visuals (Post Processing, Lighting, Shadows)",
        "3": "Optimization",
        "4": "Asset Implementation",
        "5": "Tools",
        "6": "Niagara VFX",
        "7": "Level Design",
        "8": "UI Programming"
      },
      "goals_details": {
        "1": "Customizable pattern for the character - Achieved by offsetting, rotating, and scaling of a texture. There's more info in the Shaders and VFX section.<br></br>Transparent pipes - The material may look simple but I actually studied some clear plastic in real life to recreate what I saw. Fresnel was my friend here for a lot of it and I also included some fake reflections with a cube map to keep things cheap.<br></br>Bedding - Made the bedding lumpy with vertex displacement. An issue came up where looking down while in a lump made the floor flicker. Fixed this by making the lumps flatten based on the camera's location.",
        "2": "Changed the post processing, lighting, and shadows to get the desired look. Our game was saturated and harsh, we wanted soft and pastel.<br></br>To pastel-ify the colors I reduced the contrast between the lights and darks and slightly desaturated everything with the global post process volume.<br></br>To soften the lighting I brightened the skylight, turned off lumen, and turned on shadow maps. In a post process material I boosted the saturation of the shadows back up so they adopted the color of their surface like our reference images.",
        "3": "Conducted a large optimization overhaul which included adjusting project settings, reducing the geo of models, applying and tweaking LODs to all assets, and reworking the post processing and lighting, bringing the frame time down from 27ms to 6ms.",
        "4": "Implemented and verified assets with detailed feedback, making any quick in-engine adjustments using tools such as the modeling mode.",
        "5": "Level design - Created a blueprint that lets me quickly construct cage walls and snap them to one another.<br></br>Screenshot stager - Developed a blueprint that lets artists place, animate, and move hamsters to stage pictures and then take screenshots with easy controls.",
        "6": "Made minor tweaks to existing effects. Things such as fixing up positional issues and changing colors.",
        "7": "Quickly took map designs from simple concept sketches to playable maps. Ensured variation in map size and unique scenarios for each map.",
        "8": "Programmed and helped design the customizer menu, main menu, and the level selector."
      }
    },
    {
      "title": "Where's that Clown?!",
      "category": "Top-down Arcade Game",
      "link": "https://store.steampowered.com/app/3730960/Wheres_That_Clown/?curator_clanid=4777282",
      "image": "Clown.png",
      "video": "https://player.vimeo.com/video/1114691331",
      "introduction": "Top-down arcade game where you bring props to crowds to keep a party entertained.",
      "goals_list": {
        "1": "Gameplay Programming",
        "2": "Environment Shaders",
        "3": "Character Shaders",
        "4": "Controller Compatibility",
        "5": "Character Animation Programming",
        "6": "Level Design",
        "7": "Music",
        "8": ""
      },
      "goals_details": {
        "1": "Handled programming over the entire project including the main game loop, character movement, character interactions, powerups, saving systems, UI, animations, music and sound programming, vfx, and adding controller compatibility.",
        "2": "Out of bounds - The invisible walls show a net-like pattern when the player gets close to signal what you can't jump/throw over.<br></br>Moving foliage - The classic moving leaves and grass.",
        "3": "Random NPCs - Randomized the hair, skin, and clothing colors for the NPCs to take some work off of the art team.<br></br>Alternate character skins - Different powerups give the player a different color scheme. I took a funny shortcut and simply hue shifted the color texture to create alternate skins for the character.",
        "4": "Configured the gameplay to work for a controller (in addition to keyboard), made the UI icons change based on the input type, and made the UI navigable with the controller.",
        "5": "Do not do what I did for this.",
        "6": "Aided in early level design, steering the design toward a layout that aids the player to increase the fun. This included bringing things tucked inside corners out into the open and setting up straight shots or bank shots for the player to learn as they played the level more.",
        "7": "Whenever I can I love helping out with music and sound design!",
        "8": ""
      }
    },
    {
      "title": "Virtual Viking",
      "category": "VR Training Simulator",
      "link": "https://store.steampowered.com/app/1253160/Virtual_Viking/",
      "image": "Viking.png",
      "video": "https://player.vimeo.com/video/1114713822",
      "introduction": "VR training simulator where you gain experience with sprinkler protection systems.",
      "goals_list": {
        "1": "Gameplay Programming",
        "2": "Shader Materials",
        "3": "Optimization",
        "4": "Procedural Programming",
        "5": "Keyframed and Recorded Cinematics for YouTube",
        "6": "",
        "7": "",
        "8": ""
      },
      "goals_details": {
        "1": "Programmed the interactable steps for the VR simulations, ensuring that the vfx, audio, and gameplay were all synced and paced understandably for the user.",
        "2": "Created shaders for realistic interactions between water, fire, and the surrounding environment.<br></br>Warehouse fire - In this scene there is a box burning. The fire grows over time, blackening the cardboard as it passes while the outer edge stays glowing. The sprinkler above sprays water, snuffing out the emissive. The ground and box start becoming wet with sprinkles. Eventually the floor becomes shiny and the cardboard dampens and ripples can be seen in the water.<br></br>Propane tank - A propane tank has a flamethrower-like spray coming out of a hole. The tank over time begins to heat up red. When the fire is out the tank returns to normal but now has a dark, charred spot where the burning was and a brown ring around it. For this I used references of real burned propane tanks.",
        "3": "Used the Baker tool to reduce a complicated vfx down to just 2 particles without any loss in detail.<br></br>The fire and water materials originally had high instruction counts due to nodes such as 'vector noise' but brought them down substantially by mapping the noise to the UVs instead with minimal difference in outcome.",
        "4": "Created  a procedural pipe system that conforms to the desired start and end points, turns included, with settings for support beams.<br></br>Additionally, fixed existing procedural pipes as needed.",        
        "5": "Adjusted the simulation blueprints so the steps happened automatically. Then, using the sequencer, keyframed camera animations to record the simulation. These were then rendered out, tweaked in Premiere, and sent off to be uploaded to YouTube. I got very familiar with the sequencer for this.",
        "6": "",
        "7": "",
        "8": ""
      }
    }
  ],
  "blog-data": [
    {
      "title": "Old Building Material",
      "video": "https://player.vimeo.com/video/1115897996",
      "link": "https://www.linkedin.com/posts/jay-shippey_its-been-a-minute-ive-been-working-on-activity-7306073519920955393-Ui8Q?utm_medium=ios_app&rcm=ACoAAEDg8aUBBrDiM7hBgPVnC6d2n3cHi_s_C0k&utm_source=social_share_send&utm_campaign=copy_link",
      "goal": "Add damage and noise variation to the abandoned building environment, stylize it with some subtle coloring, and for gameplay purposes divide the building into four colored quadrants.<br></br>The once-was office building has been overrun by criminals and acts as their headquarters now. There is normally furniture and appliances strewn throughout the map and graffiti on the walls, but I have removed them for this demo.",
      "info": "<u>Material Layers:</u><br></br>Dirt/grunge, two sets of cracks of different size and darkness, distance based color tinting, fresnel based color tinting, four colored quadrants separated by a 'painted wall' texture.<br></br><u>Noise and Performance:</u><br></br>This material started with a 'vector noise' node to apply the noise textures which was far too expensive since the building material is everywhere. Now, the dirt and cracks are applied using a cheaper version of the 'WorldAlignedTexture' node I created. I effectively just rebuilt the node, only keeping what I needed.<br></br><u>Painted Wall Texture:</u><br></br>The painted wall mask that separates the colors starts with a black and white texture with a line of 'paint strokes' to transition between the colors. This texture is clamped.<br></br>I then scale that texture in world space to match the width and height of the rooms. Since the texture is clamped I used a frac node to make it tile vertically for when the building has multiple floors. I also added variables to offset the texture's position.<br></br>I masked the texture using normals so it would only apply to the walls, then using the paint texture and more normal masking I multiplied the walls with 4 colors based on their quadrant."
    },
    {
      "title": "Hamster Customizer",
      "video": "https://player.vimeo.com/video/1115904868",
      "link": "https://www.linkedin.com/posts/jay-shippey_make-a-hamster-with-me-our-free-party-game-activity-7341268396488970241-B9ey?utm_medium=ios_app&rcm=ACoAAEDg8aUBBrDiM7hBgPVnC6d2n3cHi_s_C0k&utm_source=social_share_send&utm_campaign=copy_link",
      "goal": "Give the players a lot of freedom with creating a custom look for their hamster. We figured it would be easiest on our work load to make a customizable pattern than model a bunch of accessories to choose between. We quickly realized that this freedom was maybe more expressive than if we used prebuilt accessories.",
      "info": "<u>Material Breakdown:</u><br></br>The material works by offsetting, scaling, and rotating the UVs to manipulate the texture. The color changing is done by lerping between your selections using the pattern mask. The order of the offset, scale, and rotation is important so they are most predictably controlled by the player. Beyond that, the bulk of how this works is pretty normal.<br></br>The two sliders that are a little different are the color weight and hardness sliders. The weight slider essentially pushes the colors toward one color or the other and the hardness slider transitions between a blurred and hard version of each pattern texture.<br></br><u>UI Implementation:</u><br></br>The UI was the hardest part of it all. There's not much breakdown to be had here, just a lot of code to make user experience as nice as possible. Things like getting the sliders and their respective text boxes working together, applying and saving the changes vs reverting them, and the hat options. The color wheels are a very nifty plugin called 'Easy Color Picker'.<br></br>Once the UI interaction felt good then it was just a matter of making the widget code change the material."
    },
    {
      "title": "TPS UI Shaders",
      "video": "https://player.vimeo.com/video/1115899769",
      "link": "https://www.linkedin.com/posts/jay-shippey_some-ui-materials-i-made-for-a-project-we-activity-7311882445329432576-mr66?utm_medium=ios_app&rcm=ACoAAEDg8aUBBrDiM7hBgPVnC6d2n3cHi_s_C0k&utm_source=social_share_send&utm_campaign=copy_link",
      "goal": "Make reactive UI elements for a third person shooter entirely out of material code (no textures) so there's maximum control over appearance and function and so we're not blocked by the Unreal widgets being a pain (which they usually are).",
      "info": "<u>Features:</u><br></br>Crosshair and hitmarker - Zooms in and out when you aim, the hitmarker widens for each repetitive shot, and it turns red when you get a kill.<br></br>Ammo clips - Shows how many clips you have and which one you are using. (Making one bigger also helped the readability of how many clips you have).<br></br>Damage indicators - An arc appears with a shake and keeps pointing in the direction of the hit as you move.<br></br><u>How The Materials React:</u><br></br>Images in widgets can have their material set to a material you made as long as it's a UI material. So all I'm doing is getting access to these materials and changing their parameters. I'm doing this either through direct blueprint communication or using widget animations (you can change material parameters through the animation timeline here, it's pretty cool).<br></br>Making UI elements with shaders is not only easier to work with and more customizable, but it's more performant than relying solely on widgets. And when it comes to making art with code, this is my JAM. I had a blast working on these."
    },
    {
      "title": "Wiggle Shader",
      "video": "https://player.vimeo.com/video/1115897270",
      "link": "https://www.linkedin.com/posts/jay-shippey_techart-shader-unrealengine-activity-7119698562220769280-_CC_?utm_medium=ios_app&rcm=ACoAAEDg8aUBBrDiM7hBgPVnC6d2n3cHi_s_C0k&utm_source=social_share_send&utm_campaign=copy_link",
      "goal": "Make a material function that is quick to apply to meshes so they have a trailing-behind effect. Could be fun in cases like dragging around objects in a level editor or just bringing a simple mesh to life.",
      "info": "<u>Detailed Process:</u><br></br>Start with a mesh, any mesh. Create a black-to-white gradient in object space that starts from the bottom bounds of the mesh to the top.<br></br>Create a blueprint that moves the mesh around, for me I made it move around with controls like a character.<br></br>Send variables like what direction it's moving, the distance it moved, and the amount it rotated since the last frame to the material. Because the past value will become the current value next frame, I added lerp nodes so the past values took longer to get to the current value. This helped exaggerate the effect.<br></br>The material uses the movement data and combines it with the bottom-to-top gradient. Instead of saying “put the vertices where they were x amount of time ago” it was easier to just find the direction of movement and the difference in position and use that to push the verts in the opposite direction, giving a trailing behind effect.<br></br>For example, if I were moving straight down at 1.5m/s, this gives me a direction and an intensity. I would offset all the verts by +1.5 vertically (since it's opposite of the direction I'm falling), but since that gets multiplied by the gradient, the top gets the most stretched and the bottom stays true to where it is. (The values here aren't 1 to 1 how it works in the code, but I wanted to keep it simple to help visualize).<br></br>Additional parameters were added to the material to control the strength and curve of the gradient."
    },
    {
      "title": "Ink Tentacle",
      "video": "https://player.vimeo.com/video/1114699125",
      "link": "https://www.linkedin.com/posts/jay-shippey_ink-tentacle-vfx-and-shaders-pieces-the-activity-7102044860714467328-hyJg?utm_medium=ios_app&rcm=ACoAAEDg8aUBBrDiM7hBgPVnC6d2n3cHi_s_C0k&utm_source=social_share_send&utm_campaign=copy_link",
      "goal": "My goal here was to figure out how to leave behind a trail of something in real time. The inky tentacle monster was the context for that effect.",
      "info": "<u>Breakdown:</u><br></br>The Tentacle - Ribbon renderer with shape setting to tube. I get it to launch out by setting initial velocity based on spawn index. Scratch pad code that makes each point move toward the previous one (this reels the tentacle back in). Using particle collision events, it slithers on the ground and spawns decal particles which leaves an ink trail behind. Roughness and specular are 0 for a void-like, pure black material for everything.<br></br>The Portal - Ink splat texture with alpha erosion at start and end. Cone burst of velocity aligned particles with point attraction to bring them back in. Scale sprite with speed for the stretching effect.<br></br>The Snap - Manual positioning and timing. Burst is done with U shaped particles that are velocity aligned but stop almost instantly.<br></br>Environment - Made a simple sci-fi wall in blender to add context to the effect. Blueprint for the alarm lights. Decals for the splatters on the ground."
    }
  ]
}